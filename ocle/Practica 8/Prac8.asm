.MODEL SMALL 
	.STACK 100H
	INCLUDE PROCS.INC 
	LOCALS 
.DATA 
	mens_directo  db 10,13,"Desplegado de caracteres en forma directa:",0
	mens_DOS1 	  db 10,13,"Desplegado de caracteres usando DOS:",0
	mens_BIOS2     db 10,13,"Desplegado de caracteres usando BIOS:",0
	;*******************************************************************
	MENS_dos	DB	10,13,"Captura de caracter con DOS:",0
	MENS_bios	DB	10,13,"Captura de caracter con BIOS:",0
	MENS_CAR_b	DB  10,13,"Caracter capturado",0
	MENS_dos_c	DB	10,13,"Desplegado de una cadena con DOS",0
	cad_dos 	DB 	10,13,"Cadena desplegada con DOS Servicio 9h Int 21","$"
	MENS_bios_c	DB	10,13,"Desplegado de una cadena con BIOS",0
	mens_archivos db 10,13,"Parte 2 Archivos",0
	MENS_CAD	DB 10,13,"INGRESA UNA CADENA:",0
		newLine db 10,13,0
	ARCHIVO DB "ar.txt",0	;ARCHIVO QUE SE ABRIRA 
	AECHIVO_2 DB "ar_2.txt",0;ARCHIVO DONDE SE ESCRIBE 
	buffer db 21 dup(0)		;TAMANIO DEL BUFFER A 20 BYTES
	buffer2 db 50 dup(0)		;TAMANIO DE 50 BYTES
	cad_bios	DB 	10,13,"Cadena desplegada con BIOS Servicio 13H int 10",0
	Tammsg = ($-cad_bios)	;TAMANIO DE LA CADENA PARA LA IMPRESION EN BIOS 
 
	
.CODE 
	Principal PROC 
	MOV AX,@DATA
	MOV DS,AX
	;**********************codigo profe**************************
	CALL CLRSCR
	MOV DX,OFFSET mens_directo
	CALL PUTS 
	MOV AL,'X'	;CARACTER A DESPLEGAR 
	MOV BH,41
	MOV BL,0	;POSICION (41,0)
	CALL PUTCHARXY	;IMPRIME CARACTER (DL) EN LA POSICION (X,Y)
	
	MOV DX,OFFSET mens_DOS1
	CALL PUTS 
	MOV DL,'Y' 	;CARACTER A DESPLEGAR 
	MOV AH,2	;SERVICIO: DESPLEGAR CARACTER
	INT 21H 	;LLAMADA DEL DOS SERVICIO 2
	
	MOV DX,OFFSET mens_BIOS2
	CALL PUTS 
	MOV AL,'Z'	;CARACTER A DESPLEGAR 
	MOV AH,0AH	;SERVICIO: DESPLEGAR CARACTER EN PANTALLA 
	MOV BX,0	;NO. DE PAGINA PARA DESPLEGAR 
	MOV CX,1	;NUMERO DE VCECES A DESPLEGAR 
	INT 10H		;LLAMADA DEL BIOS SERVICIO 0AH
	;**************************************************************************
	MOV DX,OFFSET newLine
	CALL PUTS
	CALL PUTS 
	;**************EJEMPLO DE CAPTURA DE CARACTER CON DOS**********************
	MOV DX,OFFSET MENS_dos
	CALL PUTS 
	MOV AH,01	;SERVICIO DE CAPTURA DE CARACTER CON ECHO 
	INT 21H		;INT 21 DOS
	MOV DX,OFFSET MENS_CAR_b
	CALL PUTS 	;MENSAJE DE VERIFICACION DE CAPTUA YA QUE EL CARACTER
	MOV DX,OFFSET newLine
	CALL PUTS
	CALL PUTS
	;**************EJEMPLO DE CAPTURA DE CARACTER CON BIOS*********************
	MOV DX,OFFSET MENS_bios
	CALL PUTS 
	MOV AH,10	;SERVICIO 10 DEL BIOS PARA LA CAPTUA DE CARACTER 
	INT 16 		;INTERRUPCION 16 DEL BIOS 
	MOV DX,OFFSET MENS_CAR_b
	CALL PUTS 	;MENSAJE DE VERIFICACION DE CAPTUA YA QUE EL CARACTER
				;NO TIENE ECHO 
	MOV DX,OFFSET newLine
	CALL PUTS
	CALL PUTS
	;**************EJEMPLO DE DESPLEGADO DE UNA CADENA HACIENDO USO DEL DOS****
	MOV DX,OFFSET MENS_dos_c
	CALL PUTS 
	MOV AH,09				;SERVICIO 9H DEL DOS
	MOV DX,OFFSET cad_dos	;REGISTRO QUE APUNTA A LA CADENA CON TERMINACION $
	INT 21H					;INTERRUPCION QUE LO ACTIVA
	MOV DX,OFFSET newLine
	CALL PUTS

	;**************EJEMPLO DE DESPLEGADO DE UNA CADENA USANDO USANDO EL BIOS***
	MOV DX,OFFSET MENS_bios_c
	CALL PUTS
	MOV AX,DS
	MOV ES,AX 	;ES:DS
	MOV AH,013H	;ATRIBUTO DE COLOR Y FONDO DE LETRA
	MOV BL,00CH
	MOV AL,0	;MODO ESCRITURA 
    MOV BH,0	;PAGINA DE VIDEO 
	MOV CX,Tammsg
	MOV DH,18	;FILA
	MOV DL,0	;COLUMNA
	MOV BP,OFFSET cad_bios
	INT 10H
	MOV DX,OFFSET newLine
	CALL PUTS
	MOV DX,OFFSET newLine
	CALL PUTS
	;**************PROCEDIMIENTO PUTSXY QUE IMPRIME UNA CADENA EN 0************
	;**************FUNCIONES DE ARCHVOS****************************************
	MOV DX,OFFSET mens_archivos
	call puts
	MOV DX,OFFSET newLine
	CALL PUTS
	
	MOV DX,OFFSET ARCHIVO	;MANDAMOS LA DIRECCION DEL ARCHIVO A ABRIR
	MOV AL,0h	;ACCESO SOLO A LECTURA
	CALL ABRIR_ARCHIVO		;LLAMAMOS EL PRCEDMIENTO QUE ABRE UN ARCHIVO 
	;***********************ARCHIVO ABIERTO*****************************
	XOR CX,CX				;LIMPIAMOS CX
	MOV BX,AX				;MANDAMOS EL HANDLE DE ABRIR EL ARCHIVO
	MOV CX,21				;BYTES A LEER 
	MOV DX, offset buffer	;BUFFER DONDE SE ALMACENARA LOS CARACTERES LEEIDOS
	CALL LEER_ARCHIVO		;PROCEDIMIENTO QUE LEE UN ARCHIVO 
	CALL PUTS				;PROCEDIMINETO PARA IMPRIMIR CADENAS 
	CALL CERRAR_ARCHIVO		;PROCEDIMIENTO QUE CIERRRA EL ARCHIVO 
	MOV DX,OFFSET MENS_CAD	;MENSAJE PARA CAPTURAR UNA CADENA 
	CALL PUTS
	;;***********************ARCHIVO LEEIDO Y CERRADO*********************
@@CAP: mov ah,01h			;SERVICIO  PAR CAPTURAR CARACTER
    int 21h
	mov buffer2[si],al		;INGRESAMOS CARACTER POR CARACTER 
	inc si					;INCREMENTAMOS SI PARA LA SIG POSICION;
	cmp al,0dh 				;COMPARMAOS CON UN ENTER 
	JNE @@CAP
	
	MOV AL,1h				;ACCESO SOLO A ESCRITURA
	MOV DX,OFFSET AECHIVO_2	;ABRIMOS LA CANEDA QUE INGRESAMOS 
	CALL ABRIR_ARCHIVO		;ABRIMOS EL ARCHIVO 
	MOV BX,AX 				;MOVEMOS EL HANDLE
	MOV CX,SI				;CANTIDAD DE CARACTERES A ESCRIBIR 
	MOV DX,OFFSET buffer2	;MANDAMOS A DX EL OFFSET DONDE SE GRABARA EL ARCHIVO
	CALL ESCRIBIR_ARCHIVO	;ESCRIBIMOS EL ARCHIVO 
	CALL CERRAR_ARCHIVO		;CERRAMOS EL ARCHIVO
	;***********************ARCHIVO ESCRITO Y CERRADO**********************
	MOV AH,04CH	;FIN DEL PROGRAMA
	MOV AL,0
	INT 21H
	RET
ENDP 
;**********************************************************************
;**********PROCEDIMIENTO PARA ARCHIVOS EN ENSAMBLADOR*******
	ABRIR_ARCHIVO PROC 
	MOV AH,3DH	;LLAMADA PARA LA LECTURA DE UN FICHERO 
	;MOV AL,0h	;ACCESO SOLO A LECTURA 
	INT 21H 	;INTERRUPCION QUE ACTIVA EL SERVICIO DE ARCHIVOS 
				;SI SE EJECUTA CORRECTAMENTE FLAG CF=0
				;AX = HANDLE O MANEJADOR DEL ARCHIVO
	RET 
	ENDP 
;***********************************************************	
	CERRAR_ARCHIVO PROC
	MOV AH,3EH	;CIERRE DE ARCHIVO 
	INT 21H
	ENDP 
;***********************************************************	
	LEER_ARCHIVO PROC
	;PARAMETROS  QUE RECIBE 
	;BX=HANDLE 
	;CX=NUMERO DE BYTES A LEER
	;DS:DX= DESPLAZAMIENTO DEL BUFFER DONDE SE VAN A TOMAR LOS VALORES A LEER 
	MOV AH,3FH	;SERVICIO DE LECTURA DE ARCHIVO
	INT 21H		;INTERRUPCION DE EJECUCION
	;SI SE EJECUTO CORRECTAMENTE 
	;FLAG CF=0 Y EN AX=BYTES TRANSFERIDOS 
	;SI NO SE EJECUTA CORRECTAMENTE
	;FLAG CF=1 Y EN AX=CODIGO DE ERROR
	ret
	ENDP 
;***********************************************************	
	ESCRIBIR_ARCHIVO PROC
	;PARAMETROS QUE RECIBE 
	;BX=HANDLE 
	;CX=NUMERO DE BYTES A ESCRIBIR 
	;DS:DX=DESPLAZAMIENTO DEL BUFFER DONDE SE VAN A TOMAR LOS VALORES A ESCRIBIR  
	MOV AH,40H	;SERVICIO DE ESCRITURA A ARCHIVO 
	
	INT 21H		;INTERRUPCION DEL SISTEMA QUE LA HABILITA
				;SI SE EJECUTO CORRECTAMENTE 
				;FLAG CF=0 Y EN AX=BYTES TRANSFERIDOS 
				;SI NO SE EJECUTA CORRECTAMENTE
				;FLAG CF=1 Y EN AX=CODIGO DE ERROR
	ret
	ENDP
;**********************************************************************
;PROCEDIMIENTO: PUTCHARXY
;DESCRIPCION:	DESPLIEGA UN CARACTER EN PANTALLA EN LA POSICION (X,Y)
;PARAMETROS:	
;ENTRADA:		AL CONTIENE EL CARACTER A DESPLEGAR 
;BH CONTIENE EL VALOR DE LA POSICION X
;BL CONTIENE EL VALOR DE LA POSICION Y
;SALIDA: NINGUNA
;NOTAS: ESTE PROCEDIMIENTO NO MODIFICA LOS VALORES DE LOS REGISTROS 
;PUES SON ALMACENADOS AL ENTRAR AL PROCEDIMIENTO Y RECUPERADOS 
;AL TERMINO DEL MISMO
;**********************************************************************

	PUTCHARXY PROC 
		PUSH AX		;GUARDAMOS LOS VALORES 
		PUSH BX
		PUSH CX
		PUSH DX
		PUSH DS
		
		MOV DS,AX		;DL SERA EL CARACTER A DESPLEGAR 
		MOV AX,0B800H	;HACER QUE DS APUNTE AL SEGMENTO 
		MOV DS,AX		;DE MEMORIA DE VIDEO 
		MOV CL,160		;CALCULAR LOCALIDAD EN MEMORIA SEGUN 
		MOV AL,BL		;POSICION (X,Y)
		MUL CL 			;X: ESTA EN BH Y Y: EN B
		MOV BL,BH 		;LOCALIDAD DE MEMORIA = (X*2) + (Y*160)
		MOV BH,0
		SHL BX,1		;SE REQUIERE BX = (BL * 160) + (BH * 2)
		ADD BX,AX
		MOV [BX],DL		;MOVER DL A LA LOCALIDAD DS,BX
		
		POP DS		;RECUPERAMOS LOS VALORES ORIGINALES DE REGISTROS 
		POP DX		;UTILIZADO 
		POP CX
		POP BX
		POP AX
		RET
	ENDP
;************************************************************************	
END
		
		
